require('dotenv').config();
const TeleBot = require('telebot');
const mongoose = require('mongoose');
const async = require('async');
const moment = require('moment');

const regexps = require('./regexp/regexp');
const pipRegexps = require('./regexp/pip');
const parseBoss = require('./parsers/parseBoss');
const parsePip = require('./parsers/parsePip');
const {
  regExpSetMatcher,
} = require('./utils/matcher');
const validateForwardDate = require('./utils/validateForwardDate');
const getDump = require('./utils/getDump');
const bossSchema = require('./schemes/boss');

const Boss = mongoose.model('Boss', bossSchema);

mongoose.connect(process.env.MONGODB_URI);
const bot = new TeleBot(process.env.BOT_TOKEN);
let dumpFile;

const dumpStatuses = {
  NOT_READY: 0,
  READY: 1,
};

const botState = { dumpStatus: dumpStatuses.NOT_READY };

/*
TODO: Update when parsing is ready


setTimeout(() => {
  botState.dumpStatus = dumpStatuses.NOT_READY;

  getDump(Boss, (dump) => {
    dumpFile = Buffer.from(JSON.stringify(dump));
    botState.dumpStatus = dumpStatuses.READY;
  });
}, 10000);

getDump(Boss, (dump) => {
  dumpFile = Buffer.from(JSON.stringify(dump));
  botState.dumpStatus = dumpStatuses.READY;
});
*/

const sessions = {};

const createSession = (id) => {
  sessions[id] = {
    state: 'WAIT_FOR_FORWARD',
    data: [],
  };
};

const defaultKeyboard = bot.keyboard([
  ['üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—á–∫—É', 'üíæ –°–∫–∞—á–∞—Ç—å –¥–∞–º–ø'],
], {
  resize: true,
});

const getState = (id) => {
  if (sessions[id] !== undefined) {
    return sessions[id].state;
  }

  return null;
};

const setState = (id, state) => {
  if (getState(id) === null) {
    sessions[id] = { state };
  }
  sessions[id].state = state;
};

const getSessionData = (id) => {
  if (sessions[id]) {
    return sessions[id].data || null;
  }

  return null;
};

const pushSessionData = (id, data) => {
  sessions[id].data.push(data);
};

const updateBosses = (msg, sessionData) => {
  const dupes = 0;

  signUpMessage;
  pip;


  /* async.forEach(sessionData, (iDungeon, next) => {
    Dungeon.findOne({ name: iDungeon.name }).then((dungeon) => {
      const isForwardDupe = dungeon.toJSON().forwards.some(({ stamp }) => stamp === iDungeon.stamp);

      if (!isForwardDupe) {
        dungeon.forwards.push(iDungeon);

        dungeon.markModified('forwards');
      } else {
        dupes += 1;
      }

      dungeon.save(() => {
        next();
      });
    });
  }, () => {
    const allDupes = dupes === dungeons.length;
    const someDupes = dupes > 0;
    const someDupesReply = someDupes ? '\n–ë—ã–ª–∏ –∑–∞–º–µ—á–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã.' : '';
    if (allDupes) {
      msg.reply.text('–Ø –Ω–µ —É–≤–∏–¥–µ–ª –Ω–æ–≤—ã—Ö —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤', {
        replyMarkup: defaultKeyboard,
      });
    } else {
      msg.reply.text(`–Ø —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª —ë—ë –≤ –±–∞–∑—É${someDupesReply}`, {
        replyMarkup: defaultKeyboard,
      });
    }

    createSession(msg.from.id);
  }); */
};

bot.on(['/start', '/help'], (msg) => {
  createSession(msg.from.id);

  return msg.reply.text(`–ü—Ä–∏–≤–µ—Ç, —è –ë–ê–ë–∞ - ¬´<b>–ë–µ—à–µ–Ω–Ω—ã–π –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ë–æ—Å—Å–æ–≤</b>¬ª.
–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏ –º–Ω–æ–≥–æ —Ç—ã—Å—è—á—å –ª–µ—Ç –Ω–∞–∑–∞–¥. –ò –≤—Å—ë –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Ä–∞–∑–≥–∞–¥–∞—Ç—å —Å–µ–∫—Ä–µ—Ç –≥–∞–∑–µ—Ç–æ–∫.

–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ —Ñ–æ—Ä–≤–∞—Ä–¥ –∑–∞–ø–∏—Å–∏ –Ω–∞ –±–∏—Ç–≤—É —Å –±–æ—Å—Å–æ–º –≤–º–µ—Å—Ç–µ —Å–æ —Å–≤–æ–∏–º –ø–∏–ø–æ–º –∏ —è –∏—Ö –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é.

–°–≤—è–∑—å —Å –º–æ–∏–º –º–∞—Å—Ç–µ—Ä–æ–º (–µ–º—É —Å—Ç–æ–∏—Ç —Å–æ–æ–±—â–∞—Ç—å –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±–∞–≥–∞—Ö) - @eko24
–ß–∞—Ç –ø–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é –ø—É—Å—Ç–æ—à–∏ - @RI_Agroprom

–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ /faq.`, {
    parseMode: 'html',
    webPreview: false,
    replyMarkup: defaultKeyboard,
  });
});

bot.on('/faq', msg => msg.reply.text(`
1. –§–æ—Ä–≤–∞—Ä–¥—ã –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ä–µ–∂–∏–º "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ü–∞—á–∫—É".

2. –ë–æ—Ç –≤—ã–¥–∞—ë—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –¥–∞–º–ø–∞. –î–∞–º–ø –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–º–ø–∞ –µ—â—ë –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.

3. –§–æ—Ä–≤–∞—Ä–¥ –∑–∞–ø–∏—Å–∏ –Ω–∞ –±–∏—Ç–≤—É –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:<code>
‚öúÔ∏è–ë–æ—Å—Å—ã. –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –æ—Ö–æ—Ç—É –∑–∞ —Å–∏–ª—å–Ω–µ–π—à–∏–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è–º–∏ –ü—É—Å—Ç–æ—à–∏.

–¢–æ–±–æ–π –Ω–µ–¥–∞–ª–µ–∫–æ –æ—Ç –¥–æ—Ä–æ–≥–∏ –±—ã–ª –∑–∞–º–µ—á–µ–Ω
{–ò–º—è –±–æ—Å—Å–∞}

–ó–∞ –µ–≥–æ –≥–æ–ª–æ–≤—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –±–æ–ª—å—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞. –ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å –Ω–∏–º, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–π—Å—è –≤ –æ—Ç—Ä—è–¥: –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 4 —á–µ–ª–æ–≤–µ–∫–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ –æ—Ö–æ—Ç—É –∑–∞ —ç—Ç–∏–º —á—É–¥–∏—â–µ–º. –ü—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—Ç—å —É —Å–µ–±—è –≤ –∑–∞–ø–∏—Å—è—Ö —ç—Ç–æ —á—É–¥–∏—â–µ, —á—Ç–æ–±—ã –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞—Ç—å."
</code>`, {
  parseMode: 'html',
}));

bot.on('text', (msg) => {
  switch (msg.text) {
    case 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—á–∫—É':
      setState(msg.from.id, 'WAIT_FOR_FORWARDS');

      return msg.reply.text('–û–∫–µ–π, –∂–¥—É —Ç–≤–æ–∏ —Ñ–æ—Ä–≤–∞—Ä–¥—ã. –ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å - –∂–º–∏ –°—Ç–æ–ø', {
        replyMarkup: bot.keyboard([
          ['–°—Ç–æ–ø'],
        ], {
          resize: true,
          once: true,
          remove: true,
        }),
      });
    case '–°—Ç–æ–ø': {
      const sessionData = getSessionData(msg.from.id);

      if (sessionData !== null) {
        return updateBosses(msg, sessionData);
      }

      return msg.reply.text('–°–æ—Ä—è–Ω, –ø–æ—Ö–æ–∂–µ –º–µ–Ω—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª –∫–∞–∫–æ–π-—Ç–æ –ø–∏–¥–æ—Ä', {
        replyMarkup: defaultKeyboard,
      });
    }

    case 'üíæ –°–∫–∞—á–∞—Ç—å –¥–∞–º–ø': {
      if (botState.dumpStatus === dumpStatuses.READY) {
        return msg.reply.file(dumpFile, {
          fileName: `bosses-${moment().format('DD-MM-YYYY')}.json`,
          caption: '–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –¥–∞–º–ø –Ω–∞ —Å–∞–π—Ç–µ https://eko24ive.github.io/bosses-browser/',
        });
      }

      return msg.reply.text('–î–∞–º–ø –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤');
    }

    default:
      return null;
  }
});

bot.on('forward', (msg) => {
  if (msg.forward_from.id !== 430930191) {
    return msg.reply.text(`
–¢—ã –∑–∞—ë–±–∞–ª. –§–æ—Ä–≤–∞—Ä–¥—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç @WastelandWarsBot.
            `, {
      asReply: true,
    });
  }

  if (!validateForwardDate(msg.forward_date)) {
    return msg.reply.text('‚ùå<b>–ó–ê–ú–ï–ß–ï–ù–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê</b>‚ùå\n\n–ë—ã–ª –∑–∞–º–µ—á–µ–Ω —Ñ–æ—Ä–≤–∞—Ä–¥, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–≥–æ –º–µ–Ω—å—à–µ, —á–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Wasteland Wars (19.09.2018)', {
      asReply: true,
      parseMode: 'html',
    });
  }

  const state = getState(msg.from.id);

  if (state === 'WAIT_FOR_FORWARDS') {
    if (regExpSetMatcher(msg.text, {
      regexpSet: regexps.bossSignUp,
    })) {
      const { name } = parseBoss(msg.text);

      const parsedBossSignUp = {
        name,
        type: 'signUpMessage',
      };

      pushSessionData(msg.from.id, parsedBossSignUp);
    } if (regExpSetMatcher(msg.text, {
      regexpSet: pipRegexps.classicPip,
    })) {
      const pip = {
        ...parsePip(msg.text, true),
        type: 'pip',
      };

      pushSessionData(msg.from.id, pip);
    } if (regExpSetMatcher(msg.text, {
      regexpSet: pipRegexps.simplePip,
    })) {
      const pip = {
        ...parsePip(msg.text, false),
        type: 'pip',
      };

      pushSessionData(msg.from.id, pip);
    } else {
      return msg.reply.text('–ü—Ä–æ—Å—Ç–∏, –Ω–æ —ç—Ç–æ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥ –º–µ–Ω—è –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç :—Å');
    }
  }

  return msg.reply.text('–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ñ–æ—Ä–≤–∞—Ä–¥—ã —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—á–∫—É" !!!');
});


bot.start();
